{
  "master_tools_reference": [
    {
      "type": "function",
      "function": {
        "name": "bash",
        "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.",
        "parameters": {
          "type": "object",
          "properties": {
            "command": {
              "type": "string",
              "description": "The command to execute"
            },
            "description": {
              "type": "string",
              "description": "Clear, concise description of what this command does in 5-10 words"
            },
            "timeout": {
              "type": "number",
              "description": "Optional timeout in milliseconds (max 600000)"
            }
          },
          "required": ["command"]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "edit",
        "description": "Performs exact string replacements in files.",
        "parameters": {
          "type": "object",
          "properties": {
            "file_path": {
              "type": "string",
              "description": "The absolute path to the file to modify"
            },
            "old_string": {
              "type": "string",
              "description": "The text to replace"
            },
            "new_string": {
              "type": "string",
              "description": "The text to replace it with (must be different from old_string)"
            },
            "replace_all": {
              "type": "boolean",
              "description": "Replace all occurences of old_string (default false)",
              "default": false
            }
          },
          "required": ["file_path", "old_string", "new_string"]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "glob",
        "description": "Fast file pattern matching tool that works with any codebase size. Supports glob patterns like '**/*.js' or 'src/**/*.ts'.",
        "parameters": {
          "type": "object",
          "properties": {
            "pattern": {
              "type": "string",
              "description": "The glob pattern to match files against"
            },
            "path": {
              "type": "string",
              "description": "The directory to search in. If not specified, the current working directory will be used."
            }
          },
          "required": ["pattern"]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "grep",
        "description": "A powerful search tool built on ripgrep. Supports full regex syntax and file filtering.",
        "parameters": {
          "type": "object",
          "properties": {
            "pattern": {
              "type": "string",
              "description": "The regular expression pattern to search for in file contents"
            },
            "path": {
              "type": "string",
              "description": "File or directory to search in. Defaults to current working directory."
            },
            "glob": {
              "type": "string",
              "description": "Glob pattern to filter files (e.g. '*.js', '*.{ts,tsx}')"
            },
            "type": {
              "type": "string",
              "description": "File type to search (js, py, rust, go, java, etc.)"
            },
            "output_mode": {
              "type": "string",
              "enum": ["content", "files_with_matches", "count"],
              "description": "Output mode: 'content' shows matching lines, 'files_with_matches' shows file paths, 'count' shows match counts"
            },
            "-i": {
              "type": "boolean",
              "description": "Case insensitive search"
            },
            "-n": {
              "type": "boolean",
              "description": "Show line numbers in output"
            },
            "-A": {
              "type": "number",
              "description": "Number of lines to show after each match"
            },
            "-B": {
              "type": "number",
              "description": "Number of lines to show before each match"
            },
            "-C": {
              "type": "number",
              "description": "Number of lines to show before and after each match"
            },
            "multiline": {
              "type": "boolean",
              "description": "Enable multiline mode where . matches newlines"
            },
            "head_limit": {
              "type": "number",
              "description": "Limit output to first N lines/entries"
            }
          },
          "required": ["pattern"]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "ls",
        "description": "Lists files and directories in a given path.",
        "parameters": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The absolute path to the directory to list (must be absolute, not relative)"
            },
            "ignore": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of glob patterns to ignore"
            }
          },
          "required": ["path"]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "multi_edit",
        "description": "Makes multiple edits to a single file in one operation. Built on top of the Edit tool.",
        "parameters": {
          "type": "object",
          "properties": {
            "file_path": {
              "type": "string",
              "description": "The absolute path to the file to modify"
            },
            "edits": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "old_string": {
                    "type": "string",
                    "description": "The text to replace"
                  },
                  "new_string": {
                    "type": "string",
                    "description": "The text to replace it with"
                  },
                  "replace_all": {
                    "type": "boolean",
                    "description": "Replace all occurences of old_string (default false)",
                    "default": false
                  }
                },
                "required": ["old_string", "new_string"]
              },
              "minItems": 1,
              "description": "Array of edit operations to perform sequentially on the file"
            }
          },
          "required": ["file_path", "edits"]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "notebook_edit",
        "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source.",
        "parameters": {
          "type": "object",
          "properties": {
            "notebook_path": {
              "type": "string",
              "description": "The absolute path to the Jupyter notebook file to edit"
            },
            "new_source": {
              "type": "string",
              "description": "The new source for the cell"
            },
            "cell_id": {
              "type": "string",
              "description": "The ID of the cell to edit"
            },
            "cell_type": {
              "type": "string",
              "enum": ["code", "markdown"],
              "description": "The type of the cell (code or markdown)"
            },
            "edit_mode": {
              "type": "string",
              "enum": ["replace", "insert", "delete"],
              "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
            }
          },
          "required": ["notebook_path", "new_source"]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "notebook_read",
        "description": "Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs.",
        "parameters": {
          "type": "object",
          "properties": {
            "notebook_path": {
              "type": "string",
              "description": "The absolute path to the Jupyter notebook file to read"
            },
            "cell_id": {
              "type": "string",
              "description": "The ID of a specific cell to read. If not provided, all cells will be read."
            }
          },
          "required": ["notebook_path"]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "read",
        "description": "Reads a file from the local filesystem. Can access any file directly.",
        "parameters": {
          "type": "object",
          "properties": {
            "file_path": {
              "type": "string",
              "description": "The absolute path to the file to read"
            },
            "offset": {
              "type": "number",
              "description": "The line number to start reading from. Only provide if the file is too large to read at once"
            },
            "limit": {
              "type": "number",
              "description": "The number of lines to read. Only provide if the file is too large to read at once."
            }
          },
          "required": ["file_path"]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "task",
        "description": "Launch a new agent to handle complex, multi-step tasks autonomously.",
        "parameters": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "A short (3-5 word) description of the task"
            },
            "prompt": {
              "type": "string",
              "description": "The task for the agent to perform"
            },
            "subagent_type": {
              "type": "string",
              "description": "The type of specialized agent to use for this task (general-purpose, ollama-specialist, mat4data-architect)"
            }
          },
          "required": ["description", "prompt", "subagent_type"]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "todo_write",
        "description": "Create and manage a structured task list for your current coding session.",
        "parameters": {
          "type": "object",
          "properties": {
            "todos": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "minLength": 1
                  },
                  "status": {
                    "type": "string",
                    "enum": ["pending", "in_progress", "completed"]
                  },
                  "priority": {
                    "type": "string",
                    "enum": ["high", "medium", "low"]
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": ["content", "status", "priority", "id"]
              },
              "description": "The updated todo list"
            }
          },
          "required": ["todos"]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "web_fetch",
        "description": "Fetches content from a specified URL and processes it using an AI model.",
        "parameters": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "format": "uri",
              "description": "The URL to fetch content from"
            },
            "prompt": {
              "type": "string",
              "description": "The prompt to run on the fetched content"
            }
          },
          "required": ["url", "prompt"]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "web_search",
        "description": "Allows Claude to search the web and use the results to inform responses.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "minLength": 2,
              "description": "The search query to use"
            },
            "allowed_domains": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Only include search results from these domains"
            },
            "blocked_domains": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Never include search results from these domains"
            }
          },
          "required": ["query"]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "write",
        "description": "Writes a file to the local filesystem. Will overwrite existing files.",
        "parameters": {
          "type": "object",
          "properties": {
            "file_path": {
              "type": "string",
              "description": "The absolute path to the file to write (must be absolute, not relative)"
            },
            "content": {
              "type": "string",
              "description": "The content to write to the file"
            }
          },
          "required": ["file_path", "content"]
        }
      }
    }
  ],
  "vs_code_tools": [
    {
      "name": "semantic_search",
      "description": "Run a natural language search for relevant code or documentation comments from the user's current workspace.",
      "parameters": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The query to search the codebase for. Should contain all relevant context."
          }
        },
        "required": ["query"]
      }
    },
    {
      "name": "list_code_usages",
      "description": "Request to list all usages (references, definitions, implementations etc) of a function, class, method, variable etc.",
      "parameters": {
        "type": "object",
        "properties": {
          "filePaths": {
            "type": "array",
            "items": { "type": "string" },
            "description": "One or more file paths which likely contain the definition of the symbol."
          },
          "symbolName": {
            "type": "string",
            "description": "The name of the symbol, such as a function name, class name, method name, variable name, etc."
          }
        },
        "required": ["symbolName"]
      }
    },
    {
      "name": "get_vscode_api",
      "description": "Get relevant VS Code API references to answer questions about VS Code extension development.",
      "parameters": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The query to search vscode documentation for. Should contain all relevant context."
          }
        },
        "required": ["query"]
      }
    },
    {
      "name": "file_search",
      "description": "Search for files in the workspace by glob pattern. Limited to 20 results.",
      "parameters": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Search for files with names or paths matching this query. Can be a glob pattern."
          }
        },
        "required": ["query"]
      }
    },
    {
      "name": "grep_search",
      "description": "Do a text search in the workspace. Limited to 20 results.",
      "parameters": {
        "type": "object",
        "properties": {
          "includePattern": {
            "type": "string",
            "description": "Search files matching this glob pattern."
          },
          "isRegexp": {
            "type": "boolean",
            "description": "Whether the pattern is a regex. False by default."
          },
          "query": {
            "type": "string",
            "description": "The pattern to search for in files in the workspace."
          }
        },
        "required": ["query"]
      }
    },
    {
      "name": "read_file",
      "description": "Read the contents of a file with line range specification.",
      "parameters": {
        "type": "object",
        "properties": {
          "filePath": {
            "type": "string",
            "description": "The absolute path of the file to read."
          },
          "startLineNumberBaseZero": {
            "type": "number",
            "description": "The line number to start reading from, 0-based."
          },
          "endLineNumberBaseZero": {
            "type": "number",
            "description": "The inclusive line number to end reading at, 0-based."
          }
        },
        "required": ["filePath", "startLineNumberBaseZero", "endLineNumberBaseZero"]
      }
    },
    {
      "name": "list_dir",
      "description": "List the contents of a directory.",
      "parameters": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "The absolute path to the directory to list."
          }
        },
        "required": ["path"]
      }
    },
    {
      "name": "run_in_terminal",
      "description": "Run a shell command in a terminal. State is persistent across tool calls.",
      "parameters": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "The command to run in the terminal."
          },
          "explanation": {
            "type": "string",
            "description": "A one-sentence description of what the command does."
          },
          "isBackground": {
            "type": "boolean",
            "description": "Whether the command starts a background process."
          }
        },
        "required": ["command", "explanation", "isBackground"]
      }
    },
    {
      "name": "get_terminal_output",
      "description": "Get the output of a terminal command previous started with run_in_terminal",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the terminal command output to check."
          }
        },
        "required": ["id"]
      }
    },
    {
      "name": "get_errors",
      "description": "Get any compile or lint errors in a code file.",
      "parameters": {
        "type": "object",
        "properties": {
          "filePaths": {
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["filePaths"]
      }
    },
    {
      "name": "get_changed_files",
      "description": "Get git diffs of current file changes in the active git repository.",
      "parameters": {
        "type": "object",
        "properties": {
          "repositoryPath": {
            "type": "string",
            "description": "The absolute path to the git repository to look for changes in."
          },
          "sourceControlState": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["staged", "unstaged", "merge-conflicts"]
            },
            "description": "The kinds of git state to filter by."
          }
        },
        "required": ["repositoryPath"]
      }
    },
    {
      "name": "create_new_workspace",
      "description": "Get steps to help the user create any project in a VS Code workspace.",
      "parameters": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The query to use to generate the new workspace."
          }
        },
        "required": ["query"]
      }
    },
    {
      "name": "get_project_setup_info",
      "description": "Provides project setup information for a Visual Studio Code workspace.",
      "parameters": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "description": "The programming language for the project."
          },
          "projectType": {
            "type": "string",
            "description": "The type of project to create."
          }
        },
        "required": ["projectType"]
      }
    },
    {
      "name": "install_extension",
      "description": "Install an extension in VS Code.",
      "parameters": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the extension to install."
          },
          "name": {
            "type": "string",
            "description": "The name of the extension to install."
          }
        },
        "required": ["id", "name"]
      }
    },
    {
      "name": "create_new_jupyter_notebook",
      "description": "Generates a new Jupyter Notebook (.ipynb) in VS Code.",
      "parameters": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The query to use to generate the jupyter notebook."
          }
        },
        "required": ["query"]
      }
    },
    {
      "name": "insert_edit_into_file",
      "description": "Insert new code into an existing file in the workspace.",
      "parameters": {
        "type": "object",
        "properties": {
          "explanation": {
            "type": "string",
            "description": "A short explanation of the edit being made."
          },
          "filePath": {
            "type": "string",
            "description": "An absolute path to the file to edit."
          },
          "code": {
            "type": "string",
            "description": "The code change to apply to the file."
          }
        },
        "required": ["explanation", "filePath", "code"]
      }
    },
    {
      "name": "fetch_webpage",
      "description": "Fetches the main content from a web page.",
      "parameters": {
        "type": "object",
        "properties": {
          "urls": {
            "type": "array",
            "items": { "type": "string" },
            "description": "An array of URLs to fetch content from."
          },
          "query": {
            "type": "string",
            "description": "The query to search for in the web page's content."
          }
        },
        "required": ["urls", "query"]
      }
    },
    {
      "name": "test_search",
      "description": "For a source code file, find the file that contains the tests.",
      "parameters": {
        "type": "object",
        "properties": {
          "filePaths": {
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["filePaths"]
      }
    }
  ]
}